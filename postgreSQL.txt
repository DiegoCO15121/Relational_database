"psql --username=() --dbname=postgres" serves to log in to postgreSQL.
"\l" is used to list the db.
"CREATE DATABASE database_name;" serves to create a db.
"\c database_name" is used to connect to a db.
"\d" serves to display the tables of the db.
"CREATE TABLE table_name(column_name DATATYPE CONSTRAINTS);" is used to create a table into the db. Inside parenthesis you can put columns for a table. 
"\d table_name" is used to view more details about a table.
"ALTER TABLE table_name ADD COLUMN column_name datatype;" is used to add a column to a table.
"ALTER TABLE table_name DROP COLUMN column_name;" is used to remove a column.
"ALTER TABLE table_name RENAME COLUMN column_name TO new_name;" is used to rename a column.
"INSERT INTO table_name(column_1, column_2) VALUES(value1, value2);" is used to add data (rows) to the table.
"SELECT columns FROM table_name;" is used to view the data in a table (if we use "*" insted of columns, we can see all columns).
"DELETE FROM table_name WHERE condition;" is used to delete a row.
"DROP TABLE table_name;" is used to delete a table in a db.
"ALTER DATABASE database_name RENAME TO new_database_name;" is used to rename a db.
"DROP DATABASE db_name" is used to delete a db.
"TRUNCATE <column_name>"

//SERIAL type will make a column an INT with a NOT NULL constraint, and automatically increment the integer when a new row is added (NOT NULL can be added right next to the data type). 
"UPDATE table_name SET column_name=new_value WHERE condition;" is used to change a value into the db.
"SELECT columns FROM table_name ORDER BY column_name;" is used to put table data in order.
"ALTER TABLE table_name ADD PRIMARY KEY(column_name);" is used to add a primary key ( It's a column that uniquely identifies each row in the table).
"ALTER TABLE table_name DROP CONSTRAINT constraint_name;" is used to drop a constraint.
//NUMERIC(4, 1). That data type is for decimals. NUMERIC(4, 1) has up to four digits and one of them has to be to the right of the decimal.
"ALTER TABLE table_name ADD COLUMN column_name DATATYPE CONSTRAINT REFERENCES referenced_table_name(referenced_column_name);" is used to create a column as a foreing key.

//In case that we want a relationship one-to-much, we won't type the following command.
"ALTER TABLE table_name ADD UNIQUE(column_name);" is used to enforce one-to-one relationship (table_name will be the table that has the FK and column_name will be a FK).
"ALTER TABLE table_name ALTER COLUMN column_name SET NOT NULL;" is used to make a column NOT NULL.
//When we want to add more information to a table with FK, we need to specify the value of FK (example: INSERT INTO table_name(id_FK,columnx) VALUES(1, valuex)).
"SELECT columns FROM table_name WHERE condition;" is used to view specific columns and specific rows.

//"Many-to-many" relationships usually use a junction table to link two tables together, forming two "one-to-many" relationships. 
"ALTER TABLE table_name ADD FOREIGN KEY(column_name) REFERENCES referenced_table(referenced_column);" is used to set an existing column as a foreign key.
"ALTER TABLE table_name ADD PRIMARY KEY(column1, column2);" is used to create a primary key from two columns, known as a composite primary key.
"SELECT columns FROM table_1 FULL JOIN table_2 ON table_1.primary_key_column = table_2.foreign_key_column;" is used to see all the info from two tables (relationship one-to-one amd one-to-many)
"SELECT columns FROM junction_table
FULL JOIN table_1 ON junction_table.foreign_key_column = table_1.primary_key_column
FULL JOIN table_2 ON junction_table.foreign_key_column = table_2.primary_key_column;"  is used to view a relationship many-to-many

// pg_dump -cC --inserts -U freecodecamp universe > universe.sql
//Rebuild database: psql -U postgres < universe.sql
// pg_dump --clean --create --inserts --username=freecodecamp students > students.sql

//Composite primary key: Uses more than one column as a unique pair
"ALTER TABLE <table_name> ADD PRIMARY KEY(<column_name>, <column_name>);"

//Query patterns
"SELECT columns FROM table_name WHERE <column> LIKE '<pattern>';" (LIKE is used to find patterns in text).
(NOT LIKE is used to find things that don't match a pattern).
(ILKE  will ignore the case of the letters when matching).
(NOT ILKE will ignore the case of the letters when not matching).
"_" in a pattern will return rows that have any character in that spot.
"%" it means anything can be there. 
To search text that begins with some letter, "%" will go after the letter.
To search text that ends with some letter, "%" will go before the letter.
To search text that contains some letter: "%x%"
"WHERE <colum_name> IS NULL/IS NOT NULL" to match or not to match patterns with null elements
"ORDER BY <column_name> ASC/DESC, <column_name2>ASC/DESC" is used to specifies the order of the results. it will be in ascending order by default.
ASC = ascending
DESC = descending
"LIMIT <number>" you can add it at the end of the queery to only get the amount you want.
"SELECT MIN(<column>) FROM <table>" is used with numerical columns. It will find the lowest value in the column.
"SELECT MAX(<column>) FROM <table>" It will find the largest value in the column.
"SELECT SUM(<column>) FROM <table>" Is used to find out the value of the sum of values.
"SELECT AVG(<column>) FROM <table>" Is used to find out the value of the average of values.
"CEIL/FLOOR" round decimals up or down to the nearest whole number respectively. (example: SELECT CEIL(AVG(<column>)))
"ROUND(<number_to_round>, <decimals_places>)" is used to round decimals to the nearest whole number. You can round to a specific number of decimal places by adding a comma and number.
"SELECT COUNT(<column>) FROM <table>"  It will tell you how many entries are in a table for the column.
"SELECT DISTINCT(<column>) FROM ..."  is a function that will show you only unique values.
"SELECT <column> FROM <table> GROUP BY <column> HAVING <condition>"  is used to filter records in a result set after the GROUP BY clause has been applied. It is similar to the WHERE clause, 
but HAVING is used for filtering aggregated data.
"SELECT <column> AS <new_column_name>" is used to rename a column

//JOINS
"SELECT * FROM <table_1> FULL JOIN <table_2> ON <table_1>.<foreign_key_column> = <table_2>.<foreign_key_column>;" is used to join two tables
"SELECT * FROM <table_1> LEFT JOIN <table_2> ON <table_1>.<foreign_key_column> = <table_2>.<foreign_key_column>;" LEFT JOIN gets all rows from the left table, but only rows from the right 
table that are linked to from the left one. (Example: if we have null values in the FK column of left table, this values won't appear in the query, but the null values of FK column in the rigth table will appear).
"SELECT * FROM <table_1> RIGHT JOIN <table_2> ON <table_1>.<foreign_key_column> = <table_2>.<foreign_key_column>;" It works the same as the LEFT JOIN.
"SELECT * FROM <table_1> INNER JOIN <table_2> ON <table_1>.<foreign_key_column> = <table_2>.<foreign_key_column>;" It only returned rows if they have a value in the foreign key 
column of the opposite table. (Example: Null values of both tables of FK columns won't appear)
"<table>.<column>" is used to specify which table you want to use in the query.
"SELECT * FROM <table> AS <new_name>;" is useed to rename tables or guve them aliases.
"SELECT * FROM <table_1> FULL JOIN <table_2> USING(<column>);" is used if the foreign key column has the same name in both tables. 
"SELECT * FROM <table_1> FULL JOIN <table_2> USING(<column>) FULL JOIN <table_3> USING(<column>)" Add a third table to join